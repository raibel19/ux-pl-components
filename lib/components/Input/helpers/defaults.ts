import { getLocale, localeToCurrency } from 'ux-pl/utils/numbers';

import { IInputProps } from '../interfaces/input';

export const DEFAULTS_PROPS_MERGE = <Data, AutoCompData extends string>(): IInputProps<Data, AutoCompData> => ({
  classNamePrincipalContainer: undefined,
  classNameLabel: undefined,
  classNameInputContainer: undefined,
  classNameInput: undefined,
  classNameSkeletonContainer: undefined,
  classNameSkeleton: undefined,
  data: undefined,
  nativeInputsProps: {
    type: 'text',
  },
  onChange: undefined,
  waitTime: 800,
  reset: false,
  setDefaultValueInReset: false,
  showTextLabel: true,
  textLabel: 'Input',
  showRequired: false,
  showTextRequired: false,
  textRequired: 'Completar',
  sanitize: {
    maxDecimalDigits: 2,
    onPropertyEntry: {
      removeDecimalPoint: false,
      removeNegativeSign: false,
      removeDotIfLastCharacter: true,
      removeDecimalPointIfSingleCharacter: true,
      removeNegativeIfSingleCharacter: true,
    },
    onInput: {
      removeDecimalPoint: false,
      removeNegativeSign: false,
      removeDotIfLastCharacter: false,
      removeDecimalPointIfSingleCharacter: false,
      removeNegativeIfSingleCharacter: false,
    },
    onChange: {
      removeDecimalPoint: false,
      removeNegativeSign: false,
      removeDotIfLastCharacter: true,
      removeDecimalPointIfSingleCharacter: true,
      removeNegativeIfSingleCharacter: true,
    },
  },
  formatter: {
    locale: getLocale(),
    options: {
      currency: localeToCurrency.get(getLocale()),
      style: 'decimal',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    },
    roundDecimals: true,
  },
  validations: {
    number: {
      limits: {
        min: undefined,
        max: undefined,
        reset: false,
        showError: true,
      },
      between: undefined,
    },
    // date: {
    //   format: ['yyyy-MM-dd', 'yyyy-MM-dd HH:mm:ss', "yyyy-MM-dd'T'HH:mm:ssX"],
    // },
    maxLength: 50,
    showError: false,
    errorMessages: {
      limitsMin: 'El valor es menor al mínimo permitido',
      limitsMax: 'El valor es mayor al máximo permitido',
      between: 'El valor no encuentra en el rango permitido',
      custom: '',
    },
    classNameErrorContainer: undefined,
  },
  showSkeleton: false,
  leftElement: {
    id: '',
    className: undefined,
    classNameIcon: undefined,
    icon: undefined,
    onClick: undefined,
    renderContainer: undefined,
    show: false,
    type: 'icon',
    text: undefined,
    separator: false,
    hoverContent: undefined,
    classNameHoverContent: undefined,
    tooltipContent: undefined,
    classNameTooltipContent: undefined,
  },
  rightElement: {
    clear: {
      id: '',
      show: false,
      className: undefined,
      classNameHoverContent: undefined,
      classNameIcon: undefined,
      classNameTooltipContent: undefined,
      hoverContent: undefined,
      icon: undefined,
      separator: false,
      tooltipContent: undefined,
    },
    counter: {
      className: undefined,
      classNameInfinityIcon: undefined,
      separator: false,
      show: false,
    },
    elements: undefined,
    error: {
      id: '',
      className: undefined,
      classNameHoverContent: undefined,
      classNameIcon: undefined,
      classNameTooltipContent: undefined,
      hoverContent: undefined,
      icon: undefined,
      show: true,
      tooltipContent: undefined,
    },
  },
  autocomplete: {
    show: false,
    items: [],
    isLoading: false,
    showLoading: true,
    minLengthRequired: 0,
    itemIconSelected: undefined,
    showIconSelected: true,
    setInputSelected: undefined,
    resetOnSameItem: false,
    onBlurConfig: {
      default: true,
      reassignSelectedSuggestion: false,
      resetOnNoSelection: false,
    },
    classNamePopover: {
      classNameContent: undefined,
      classNameEmpty: undefined,
      classNameList: undefined,
      classNameSketeton: undefined,
      classNameSketetonContainer: undefined,
    },
    classNamePopoverScrollArea: {
      classNameContainer: undefined,
      classNameGroup: undefined,
      classNameItem: undefined,
      classNameItemIcon: undefined,
    },
    classNamePopoverHeader: {
      classNameButton: undefined,
      classNameContainer: undefined,
      classNameContent: undefined,
      classNameIcon: undefined,
    },
    showMessages: true,
    messages: {
      noData: 'No existen sugerencias',
      title: 'Sugerencias',
      minLengthMessage: 'Escriba almenos 5 carácteres',
      initMessage: 'Escriba para mostrar sugerencias',
    },
    virtualizeSuggestionsList: false,
  },
});
